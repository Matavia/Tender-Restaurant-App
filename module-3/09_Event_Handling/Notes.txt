Publisher
Subscriber

User clicks on link, UI can 'public' - trigger a click event on that link and another part of the browser can subscrube to 'listen' for that event and load the link as a new page

Event driven interface
Write the program to listen for user triggered events and then run a small piece of logic in response to it

Events are always tied to DOM elements

Listen to events on links, buttons, input elements, tables table rows and any other DOM element on the page

First select the DOM element that you want to list for events on
Then attach a function to that DOM element that you want triggered when the event happens

When an event is triggered it may send some information along with it:
For example:
Mouse Events - X and Y coordinates of where it happened
Keyboard Events - key that was pressed

Create powerful user interface interactions with Javascript

Reacting to events in JavaScript requires 3 things:
DOM element to listen on
Specific event to listen to
Function that holds the logic that we want to execute

All DOM elements can receive the following events:

MOUSE EVENTS
click - user clicked on DOM element
dblclick - user double clicked on element
mouseover - user moved mouse over DOM element
mouseout - user has moved their mouse out of the DOM element

INPUT ELEMENTS like <input>,<select>,<textarea>
keydown - user pressed down a key while on this DOM element
keyup - a user released a key while on this DOM
change - user has finished changing the value of this input element
focus - a user has selected this input element for editing
blue - a user has unselected this input element for editing

FORM ELEMENTS
submit - user has submitted  form using a submit button or by hitting Enter on a text input element
reset - a user has reset this form using a reset button

You have your HTML elements:

First thing you do is write the function that will do the logic of what we want

function changeGreeting{}

let greetingHeader = document.getElementById('greeting') <-- greeting is the h1 id
greetingHeader.innerText = "Goodbye" <-- This is what the text will change to

---------------------

DOM doesnt get created until the HTML has been read in the browser. Trying to get DOM elements from the DOM before the DOM is ready will cause errors at run time.

To make sure that the DOM is fully ready before we try to attach our event listeners - we listen for the DOMContentLoaded on the document object

We will add all of your event listeners inside of an anonymous function that only runs once the DOMContentLoaded event is fired:

document.addEventListener("DOMContentLoaded",() => {
//Register all of your event listeners here
});

Fuzzy:
Elements that are created and arent yet on the DOM
Event Bubbling and Propagation

Default Behavior for a and form Elements

Some events will trigger a browser's default behavior.
a elements - browser will attempt to navigate to new page by default when they are 'click'ed
form elements - browser will call a remote server by default when they are 'submit'ed

Browser will always call your JavaScript listeners before doing the default action. This way you will have the ability to prevent the default action if you dont want it to happen.
Use the event object that you get in your event listener and call preventDefault() on it

aLink.addEventListener('click', (event) => {

// Tells the browser to not perform its normal action
event.preventDefault();

// Then call the event handler
toggleImage(event.currentTarget);
});
 


Now we want to get the DOM element we want to listen to the event on. Here's that button:

let changeButton = document.getElementById('change-greeting');

------------------------------
Then attach the function to run whenever we get a click event on the button:

changeButton.addEventListener('click',(event) => {
chnageGreeting();
});

We can achieve the same thing by using Anonymous Functions, but it is best practice to use the method above:

Event Objects hold important properties that we can use to get information about what an event was - All event handlers will receive an object when the even is triggered

---------------------------------------------------------------------------------------------------------------

app.js DOM