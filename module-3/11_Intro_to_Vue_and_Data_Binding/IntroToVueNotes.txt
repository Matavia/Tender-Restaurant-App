laura@techelevator.com
techelevator123

Transpiler - 

Vue components use the latest versions of Javascript - not all web browsers are fully compatible with all features.
Transpiler converts the Vue code into a version of Javascript thats more widely compatible

CLI simplifies the grunt work of setting up a project and creating new componenets

--------------------------------------
Install with this command:

npm install -g @vue/cli@3.3.0
( -g installs it globally )
-------------------------------------

Starting a new project:( this represents the name of the project and the name of the folder

vue create first-project

---------------------------------------

The CLI prompts you to pick through several modules and defaults for your project. use arrow keys and space bar and enter

Most common programs used: 
Babel - Converts modern JavaScript code to JS code that compatible with all major browsers

ESLint Checks syntax and common errors in JS and ES6 when the project is built

Mocha and CHai - Test Vue compnonent, easy to use untit testing framework

E2E Testing using Cypress - Does black box ingegration testing using the Cypress testing framework

(There are sub selections but you typically want to use defaults - downloads the tools and generates the files for the project

Many files and folders generated, main folder is the src folder this is where all of the src code for compnonents go

components loaded into root Vue instance - (App.vue in src folder - The engine that starts and coordiantes your Vue components)

can have multiple roots but if pages are gonna communicate with eachother they need to live inside the same root

Parent/Child component strategy main way we'll build components for now

 - npm run serve in the integrated terminal compiles the code and runs it using a virtual server to view

 - Once the command is run, open the browser to the URL that shows on the screen once NPM has compiled

If you download or open and existing Vue project, and see package.json - it means that the project could have depenencies

Dependencies are stored in node_modules ( Before the project works, I have to install any dependencies

Depencies block defines what the project needs to run

devDependencies defines what packages I need to work on the project locally

If I dont see a node_modules folder, install of the depencies with:

npm install

(If I open a downloaded project and receive an erroe adter running application - the node_modules might be missing


<template> HTML - defines structure and content

<script> JavaScript - data and behavior for component - defines the Vue object for the component
contains all the configuration needed to create a VUE instance from your component code

<style> CSS
defines default view and layout for the component
this css should only apply to this component and not affect other elements that might also be included on teh page

each Vue component must have only one root element. This means inside the <template> tags there must be an HTML element that holds the rest of the components HTML - typically a div

When <template> tags themselves are shown, the tags themselves wont be included int the display, everything else in between will be


One way data binding {{message}} ( is defined in the JavaScript )
-Connecting a data property in the component to a part of the HTML view - when the value of that property changes the HTML automatically updates to show the new value

Next step is to display component so that users can interact with it
Add your component to main App.vue that was generated by the CLI

Go to beginning of Javascript section and add a new import line to import your new component

Then add the component to the components section of the Vue object

Then add the tag to the template section

JavaScripts are like arrays -  they have key value pairs
model or represent a certain concept

Can add more complex values by nesting multiple obejcts into one structure

Functions are values in Javascript


let rectangle = {
    length: 20,
    width: 34,
    area: function() {
        return this.length * this.width;
    },
    perimeter: function() {
        return (2 * this.length) + (2 * this.width);
    }
};

The example above the concept is a rectangle in a mathematics applications
By keeping the data and functions together in one thing you can group everything you need to represent a rectangle in the system - 

Grouping together the data and behavior, represented as variables and functions for a certain concept - Encapsulation
- Also defined as bundling of dagta with the functions that operate on that data. 

When you want to create components in JavaScript and in Vue you build those components as objects - THe objects hold the data for that component and the functions that represent actions the components use to perform logic and operate on its data

With components you'll start thinking about what the component has and what the component can do.
Properties make what it has
Functions make up what it do

Keeping data with the methods that work on that data as one unit is very important in programming

Javascript has a built in feature to compute values - they are called computed properties
Vue keeps these values updated

can use reduce() 
can fitler an array to keep the og data

data properties need to be returned from a function - you want each component to have its own set of data properties

Two way binding - 

bind a data property to an input element using an attribute on the HTL elements.. v-model

<input type="text" v-model="name"/>
-This ties the data property name to the value from the text field above
- If a user types a new value in the text field, the value of the data property name updates to match that value 
-Important - if the data property value ever changes through some other method (function or API) the text in the input box automatically updates to the new value 


To add binding to a select element add v-model on the select tag with the data property you want to 


<select name="role" v-model="role">
    <option value=""> --- </option>
    <option value="admin">Administrator</option>
    <option value="user">Regular User</option>
</select>

(note: good practice to make the first option disabled with a value of the empty string, otherwise on mobile devices it may not give them a selection)

single check box - use v-model to keep track if its selected or not. give no value. 
If the checkbox is checked the value will be true

Can use multiple checkboxes with values to bind to an array of values 

- Give each checkbox the same name but unique values, then bind them to the same data property

As boxes are checked, automatically updates the data property to be an array filled with the checked values
- Must initialize this property as an empty array
If not Vue treats a boolean and will cause one checked box to check all boxes

v-models can be used on text areas

V-MODEL MODIFIERS

.lazy (textarea or textfields) - wont update as user types, waits until the user leaves the text field before updating

.number - saves the value as a JS number instead of string

.trim - remove beginning or ending whitespace that a user typed in 


v-for takes an array and creates a DOM element

V-bind:key - how Vue keeps track of which object goes with which DOM element

can use v-bind to toggle CSS classes - 
For example: if you have a required field, you can use this to toggle on and off a background color

First thing is to set up the CSS
then:
v-bind:class={'needs-content' : firstName === ''}" (When first name field is empty, it will disply styling for .needcontent 

v-bind:class --> passes a JavaScript object, 
the keys of that object are the classes that you want to toggle on this element
the values are a boolean property or expression that says whether the class is applied or not, if the value evaluates to true the class is added


v-bind:class means apply this style to this class
